#!/usr/bin/env node

const chalk = require('chalk');
const chokidar = require('chokidar');
const express = require('express');
const spawn = require('child_process').spawn;
const next = require('next');

const program = {
  root: `.`, // next root directory
  args: [`./codelabs/**/*.md`], // files to watch, support glob
  event: `change`, // watch event
  command: `./convert.sh`, // on event, execute the command
};
const defaultWatchEvent = 'change';

// eslint-disable-next-line node/no-deprecated-api
const { parse } = require('url');
const shell = process.env.SHELL;
const port = parseInt(process.env.PORT, 10) || 3000;
const hostname = process.env.HOSTNAME || 'localhost';
const app = next({
  dev: true,
  dir: program.root || process.cwd(),
  // When using middlewares in NextJS 12, `hostname` and `port` must be provided
  // (https://nextjs.org/docs/advanced-features/custom-server)
  port,
  hostname,
});
const handle = app.getRequestHandler();

app.prepare().then(() => {
  console.info(`watching `, program.args, `on change => `, program.command);
  // if directories are provided, watch them for changes and trigger reload
  if (program.args.length > 0) {
    chokidar
      .watch(program.args, { usePolling: Boolean(program.polling) })
      .on(
        program.event,
        async (filePathContext, eventContext = defaultWatchEvent) => {
          app.server.hotReloader.send('building');

          if (program.command) {
            // Use spawn here so that we can pipe stdio from the command without buffering
            const cmd = spawn(
              shell,
              [
                '-c',
                program.command
                  .replace(/\{event\}/gi, filePathContext)
                  .replace(/\{path\}/gi, eventContext),
              ],
              {
                stdio: 'inherit',
              }
            );
            cmd.on('close', () => {
              app.server.hotReloader.send('reloadPage');
            });
          }
        }
      );
  }

  // create an express server
  const server = express();

  // special handling for mdx reload route
  const reloadRoute = express.Router();
  reloadRoute.use(express.json());
  reloadRoute.all('/', (req, res) => {
    // log message if present
    const msg = req.body.message;
    const color = req.body.color;
    msg && console.log(color ? chalk[color](msg) : msg);

    // reload the nextjs app
    app.server.hotReloader.send('building');
    app.server.hotReloader.send('reloadPage');
    res.end('Reload initiated');
  });

  server.use('/__next_reload', reloadRoute);

  // handle all other routes with next.js
  server.all('*', (req, res) => handle(req, res, parse(req.url, true)));

  // fire it up
  server.listen(port, err => {
    if (err) throw err;
    console.log(`> Ready on http://localhost:${port}`);
  });
});
